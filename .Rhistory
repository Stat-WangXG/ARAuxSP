## fit the model
arfit <- AR.AuxSP.AGMM.fit(yobs,delta,X,tstar,phi,G,
lambdas=lambdas,lambdas.num=lambdas.num,
trace.cv=trace.cv)
rownames( arfit$coef ) <- vars.name
## tidy the results
fit <- list()
class(fit) <- c("AR")
fit$sdata <- arfit$sdata
fit$call <- call
fit$formula <- formula
fit$vars.num <- vars.num
fit$coef <- arfit$coef
## print the fitting results
if (!is.null(cl <- fit$call)) {
cat("Call:\n")
dput(cl)
}
cat("\nAdditive Risk Model with Auxiliary Subgroup Survival Information:\n")
print(fit$coef)
cat("\n")
invisible(fit)
}
#' @export
AR.AuxSP.AGMM.fit <- function(yobs,delta,X,tstar,phi,G,
lambdas=NULL,lambdas.num=10,
trace.cv=FALSE){
# Additive Risk Model with auxiliary subgroup survival rate
#   using GMM and Adaptive lasso (profile NM algorithm)
# From: DJ - Motivated by Chen et al. (2020) and Cheng (2013)
# Arguments:
#   tstar:  auxiliary time point (only 1)
#   phi:    auxiliary survival rates [length(phi)=nrow(G)]
#   G:      indicator matrix - one row indicates one group
# Output:
#   coef:
#   coef.tau:
#   IC.info:
# How to implment:
#   1. AR.AuxSP.AGMM(yobs,delta,X,tstar,phi,G)
#   2. AR.AuxSP.AGMM(yobs,delta,X,tstar,phi,G,lambdas=0.05)
#   3. AR.AuxSP.AGMM(yobs,delta,X,tstar,phi,G,lambdas.num=10)
# Basic elements
p <- ncol(X); K <- length(phi)
N <- length(yobs); N0 <- sum(delta)
### Preparations before GMM procudure ###
# Get the initial value for beta and alpha
arfit <- AR.fit(yobs,delta,X) # Lin and Ying's estimator
bet.LY <- arfit$coef[,1]
alp.LY <- AR.Ht(arfit,tm=tstar)[,2]
# get the initial estimate of tau
# if(tauinit=="AB"){
sur.init <- exp(-alp.LY-(X%*%bet.LY)*tstar)
a <- ( G%*%sur.init - apply(G*phi,1,sum) ) / N
b <- apply(G,1,mean)
tau.init <- as.vector(a/b)
# }else if(tauinit=="KM"){
#   tau.init <- KM.St.Sub(tstar,yobs,delta,G) - phi
# }
# tau.init <- c(0.1,0,0,0)
# set the weights for adaptive lasso
w <- 1/abs(tau.init)
# The Inverse of the Asymptotic Covariance Matrix
Wc <- solve(AR.AuxSP.EE.Sigma(bet.LY,alp.LY,yobs,delta,X,tstar,phi+tau.init,G))
W <- as.matrix(bdiag(solve(AR.EE.Sigma(yobs,delta,X)),Wc))
# Define the object function, initial value
obj <- AR.AuxSP.AGMM.LossFunc
rot <- c(bet.LY,alp.LY)
### GMM: Tuning parameter lam Using BIC from Andrews and Lu (2001) ###
# define my lambdas points that will be estimated at
if(is.null(lambdas)){ # if lambdas have not been defined before
lambdas <- 2*sqrt(log(K))*N^(-1/2-1/4) * exp(seq(-3,3,length.out=lambdas.num))
}else{
lambdas.num <- length(lambdas)
}
# repeat to try different lams
Res.all <- list()
for( ilam in 1:lambdas.num){ # ilam <- 1
if(trace.cv){cat("CV: Round",ilam,"...\n")}
# Define the current lam
lam <- lambdas[ilam]
# optimize the object function using current lam
res <- stats::optim(par = rot, fn = obj,method = "Nelder-Mead",
control = list(maxit = 500, fnscale=1),
lam=lam,w=w,W=W,Wc=Wc,yobs=yobs,
delta=delta,X=X,tstar=tstar,phi=phi,G=G)
tau.c <- AR.AuxSP.AGMM.Tau.Profile(res$par[1:p],res$par[p+1],lam,w,Wc,X,tstar,phi,G)
# Combine the estimates
res$par <- c(res$par,tau.c)
Res.all[[ilam]] <- res
}
# evaluate among all these results
convergence.all <- sapply(Res.all, function(temp){ifelse(temp$convergence==0,T,F)})
IC.all <- sapply(Res.all, function(temp){
bet_alp.i <- temp$par[1:(p+1)]; tau.i <- temp$par[(p+2):(p+1+K)]
AR.AuxSP.GMM.LossFunc(bet_alp.i,W,yobs,delta,X,tstar,phi+tau.i,G) +
sum( abs(tau.i)>1e-6 ) * log(N)/N})
# Select the minimal BIC
IC.min.idx <- which.min(IC.all)
res <- Res.all[[IC.min.idx]]; convergence <- convergence.all[IC.min.idx]
bet <- res$par[1:p]; alp <- res$par[p+1]; tau <- res$par[(p+2):(p+1+K)]
### Variance Estimation: based on asymptotic var-cov matrix ###
SE <- AR.AuxSP.AGMM.SE(bet,alp,tau,yobs,delta,X,tstar,phi,G)
SE.bet <- SE$SE.bet
SE.tau <- SE$SE.tau
### summary the final results ###
zvalue.bet <- bet/SE.bet
pvalue.bet <- 2*(1-pnorm(abs(zvalue.bet)))
coef <- data.frame(Est=bet, SE=SE.bet, zvalue=zvalue.bet, pvalue=pvalue.bet,
row.names=colnames(X))
zvalue.tau <- tau/SE.tau
pvalue.tau <- 2*(1-pnorm(abs(zvalue.tau)))
coef.tau <- data.frame(Est=tau, SE=SE.tau, zvalue=zvalue.tau, pvalue=pvalue.tau,
row.names=paste("tau",1:K,sep=""))
### Output the Results ###
out <- list(
sdata=list(yobs=yobs,delta=delta,X=X), # collect my data info
coef=coef,
coef.tau=coef.tau,
IC.info=list(
IC.all = data.frame(lam=lambdas, IC=IC.all),
IC.min = c(lam=lambdas[IC.min.idx], IC=IC.all[IC.min.idx]) ),
convergence=convergence # converge or not
)
return(out)
}
gXcut <- function(X){  # group function
rbind(  ( X[,1] >= 0.5 & X[,2] == 0),
( X[,1] <  0.5 & X[,2] == 0),
( X[,1] >= 0.5 & X[,2] == 1),
( X[,1] <  0.5 & X[,2] == 1)
) * 1
}
data("toydata1")
phi.true <- c(0.646,0.732,0.433,0.491)
tau <- c(0.2,0,0,0)
phi <- phi.true - tau
aux <- list(tstar=0.5,phi=phi,
G=gXcut(toydata1[,c("X1","X2")]))
AR.AuxSP.AGMM(Surv(yobs,delta)~X1+X2,data=toydata1,aux=aux,trace.cv=TRUE)
## fit the model
arfit <- AR.AuxSP.AGMM.fit(yobs,delta,X,tstar,phi,G,
lambdas=lambdas,lambdas.num=lambdas.num,
trace.cv=trace.cv)
arfit <- AR.AuxSP.AGMM.fit(yobs,delta,X,tstar,phi,G
)
arfit$convergence
arfit$IC.info
cat("\nAdditive Risk Model with Auxiliary Subgroup Survival Information
(Potential Incomparability):\n")
cat("\nAdditive Risk Model with Auxiliary Subgroup Survival Information",
"(Potential Incomparability):\n")
cat("\nAdditive Risk Model with Auxiliary Subgroup Survival Information",
"(Existing Potential Incomparability):\n")
print(fit$coef)
cat("\n")
cat("\nSparse Estimation Results:\n")
AR.AuxSP.AGMM <- function(formula,data,aux,na.action=na.omit,
lambdas=NULL,lambdas.num=10,
trace.cv=FALSE){
## basic
call <- match.call()
indx <- match(c("formula", "data", "na.action"), names(call), nomatch = 0)
if (indx[1] == 0)
stop("A formula argument is required")
## prepare data
sdata <- data.frame(data)
sdata <- na.action(sdata) # dealting with nans
mf <- model.frame(formula, sdata) # [dataframe: for latency part]
N <- nrow(mf)
Y <- model.response(mf)
if (!inherits(Y, "Surv")) stop("Response must be a survival object")
vars.name <- all.vars(formula)[-c(1,2)] # covariates
X <-  as.matrix(sdata[,vars.name])
yobs <- Y[,1]   # observed survival time
delta <- Y[,2] # censoring indicator
vars.num <- ncol(X) # num of covariates
tstar <- aux$tstar
phi <- aux$phi
G <- aux$G
## fit the model
arfit <- AR.AuxSP.AGMM.fit(yobs,delta,X,tstar,phi,G,
lambdas=lambdas,lambdas.num=lambdas.num,
trace.cv=trace.cv)
rownames( arfit$coef ) <- vars.name
## tidy the results
fit <- list()
class(fit) <- c("AR")
fit$sdata <- arfit$sdata
fit$call <- call
fit$formula <- formula
fit$vars.num <- vars.num
fit$coef <- arfit$coef
fit$coef.tau <- arfit$coef.tau
fit$convergence <- arfit$convergence
fit$IC.info <- arfit$IC.info
## print the fitting results
if (!is.null(cl <- fit$call)) {
cat("Call:\n")
dput(cl)
}
cat("\nAdditive Risk Model with Auxiliary Subgroup Survival Information",
"(Existing Potential Incomparability):\n")
print(fit$coef)
cat("\n")
cat("Sparse Estimation Results:\n")
print(fit$coef.tau)
invisible(fit)
}
AR.AuxSP.AGMM(Surv(yobs,delta)~X1+X2,data=toydata1,aux=aux,trace.cv=TRUE)
library(survaux)
?AR.AuxSP.AGMM
library(survival)
?coxph
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1))
# Fit a stratified model
coxph(Surv(time, status) ~ x + strata(sex), test1)
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1),
cato=factor(1,2,3,1,2,3,2))
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1),
cato=factor(c(1,2,3,1,2,3,2)) )
# Fit a stratified model
coxph(Surv(time, status) ~ x + strata(sex)+cato, test1)
test1 <- list(time=c(4,3,1,1,2,2,3,1),
status=c(1,1,1,0,1,1,0,1),
x=c(0,2,1,1,1,0,0,0),
sex=c(0,0,0,0,1,1,1,2),
cato=factor(c(1,2,3,1,2,3,2,3)) )
# Fit a stratified model
coxph(Surv(time, status) ~ x + strata(sex)+cato, test1)
test1 <- list(time=c(4,3,1,1,2,2,3,1),
status=c(1,1,1,0,1,1,0,1),
x=c(0,2,1,1,1,0,0,0),
cato=factor(c(1,2,3,1,2,3,2,3)) )
# Fit a stratified model
coxph(Surv(time, status) ~ x+cato, test1)
test1 <- list(time=c(4,3,1,1,2,2,3,1,4,3,1,1,2,2,3,1),
status=c(1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1),
x=c(0,2,1,1,1,0,0,0,0,2,1,1,1,0,0,0),
cato=factor(c(1,2,3,1,2,3,2,3,1,2,3,1,2,3,2,3)) )
# Fit a stratified model
coxph(Surv(time, status) ~ x+cato, test1)
test1 <- list(time=c(4,3,1,1,2,2,3,1,4,3,4,1,2,2,3,1),
status=c(1,1,1,0,1,1,0,1,1,1,1,0,0,1,0,1),
x=c(0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0),
cato=factor(c(1,2,3,1,1,1,2,3,1,2,3,1,2,3,2,3)) )
# Fit a stratified model
coxph(Surv(time, status) ~ x+cato, test1)
test1 <- list(time=c(4,3,1,1,2,2,3,1,4,3,4,1,2,2,3,1),
status=c(1,1,1,0,1,1,0,1,1,1,1,0,0,1,0,1),
x=c(0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0),
cato=(c(1,2,3,1,1,1,2,3,1,2,3,1,2,3,2,3)) )
# Fit a stratified model
coxph(Surv(time, status) ~ x+cato, test1)
test1 <- list(time=c(4,3,1,1,2,2,3,1,4,3,4,1,2,2,3,1),
status=c(1,1,1,0,1,1,0,1,1,1,1,0,0,1,0,1),
x=c(0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0),
cato=factor(c(1,2,3,1,1,1,2,3,1,2,3,1,2,3,2,3)) )
# Fit a stratified model
coxph(Surv(time, status) ~ x+cato, test1)
?coxph
data("toydata1")
#' Statistics in Medicine, 8(8):907–925.
#' @references Lin, D. Y. and Ying, Z. (1994).
#' Semiparametric analysis of the additive risk model.
#' Biometrika, 81(1):61–71.
#'
#' @examples
#' data("toydata1")
#' AR(Surv(yobs,delta)~X1+X2,data=toydata1)
#'
#' @export AR
AR <- function(formula,data,na.action=na.omit){
## basic
call <- match.call()
indx <- match(c("formula", "data", "na.action"), names(call), nomatch = 0)
if (indx[1] == 0)
stop("A formula argument is required")
## prepare data
sdata <- data.frame(data)
mf <- model.frame(formula, sdata) # [dataframe: for latency part]
sdata <- na.action(sdata) # dealting with nans
N <- nrow(mf)
Y <- model.response(mf)
if (!inherits(Y, "Surv")) stop("Response must be a survival object")
vars.name <- all.vars(formula)[-c(1,2)] # covariates
X <-  as.matrix(sdata[,vars.name])
yobs <- Y[,1]   # observed survival time
delta <- Y[,2] # censoring indicator
vars.num <- ncol(X) # num of covariates
## fit the model
arfit <- AR.fit(yobs,delta,X)
rownames( arfit$coef ) <- vars.name
## tidy the results
fit <- list()
class(fit) <- c("AR")
fit$sdata <- arfit$sdata
fit$call <- call
fit$formula <- formula
fit$vars.num <- vars.num
fit$coef <- arfit$coef
## print the fitting results
if (!is.null(cl <- fit$call)) {
cat("Call:\n")
dput(cl)
}
cat("\nAdditive Risk Model:\n")
print(fit$coef)
cat("\n")
invisible(fit)
}
AR(Surv(yobs,delta)~X1+X2,data=toydata1)
#' @export
AR.fit <- function(yobs,delta,X){
# Additive Risk Model
# From: Lin and Ying (1994)
# Arguments:
#   yobs: observed failure time
#   delta:censoring indicator
#   X:    covariates (should be a matrix and have colnames)
# some preparation
N <- length(yobs)
p <- ncol(X)
y.sort <- sort( yobs )
y.rank <- rank( yobs, ties.method = 'min')
X.bar.sort <- array(0, dim=c(N, p))
for( j in 1:N){
Y <- (yobs >= y.sort[j])
X.bar.sort[j,] <- apply( X * Y, 2, sum ) / sum(Y)
}
y.sort.diff <- diff( c(0,y.sort) )
# calculate A, B and d
A0 <- B0 <- array(0, dim=c(p, p))
d0 <- rep(0,p)
for( i in 1:N ){ # i
Ki <- y.rank[i]
Xi.aug <- matrix(rep(X[i,], Ki), nrow=Ki, byrow = T)
Ri <- Xi.aug - X.bar.sort[1:Ki,]
di <- y.sort.diff[1:Ki]
I2i <- t(Ri) %*% di %*% X[i,]
I1i <- ( X[i,] - X.bar.sort[y.rank[i],] ) * delta[i]
A0 <- A0 + I2i
d0 <- d0 + I1i
B0 <- B0 + delta[i]*( Ri[Ki,]%*%t(Ri[Ki,]) )
}
A <- A0/N; B <- B0/N; d <- d0/N
# calculate the estimate of beta and SE
Est    <- solve(A,d)
Sigma  <- solve(A) %*% B %*% solve(A) # asymptotic var-cov matrix
SE     <- sqrt( diag(Sigma)/N )
zvalue <- Est/SE
pvalue <- 2*(1-pnorm(abs(zvalue)))
coef <- data.frame(Est=Est, SE=SE, zvalue=zvalue, pvalue=pvalue,
row.names=colnames(X))
# output
out <- list(
sdata=list(yobs=yobs,delta=delta,X=X),
coef=coef
)
return(out)
}
AR(Surv(yobs,delta)~X1+X2,data=toydata1)
formula=formula("Surv(yobs,delta)~X1+X2")
data <- toydata1
## basic
call <- match.call()
indx <- match(c("formula", "data", "na.action"), names(call), nomatch = 0)
if (indx[1] == 0)
stop("A formula argument is required")
## prepare data
sdata <- data.frame(data)
mf <- model.frame(formula, sdata) # [dataframe: for latency part]
mf
class( mf )
sdata <- na.action(sdata) # dealting with nans
mf <- model.frame(formula, sdata) # [dataframe: for latency part]
## prepare data
sdata <- data.frame(data)
mf <- model.frame(formula, sdata) # [dataframe: for latency part]
mf <- na.action(mf) # dealting with nans
mf
mf
## prepare data
sdata <- data.frame(data)
mf <- model.frame(formula, sdata) # [dataframe: for latency part]
formula
sdata
mf <- model.frame(formula, sdata) # [dataframe: for latency part]
mf
na.action(mf) # d
class( mf )
mf <- model.frame(formula, sdata) # [dataframe: for latency part]
mf
coxph
?na.action
na.action
na.action=na.omit
mf <- model.frame(formula, sdata) # [dataframe: for latency part]
mf
na.action(mf) #
#' Statistics in Medicine, 8(8):907–925.
#' @references Lin, D. Y. and Ying, Z. (1994).
#' Semiparametric analysis of the additive risk model.
#' Biometrika, 81(1):61–71.
#'
#' @examples
#' data("toydata1")
#' AR(Surv(yobs,delta)~X1+X2,data=toydata1)
#'
#' @export AR
AR <- function(formula,data,na.action=na.omit){
## basic
call <- match.call()
indx <- match(c("formula", "data", "na.action"), names(call), nomatch = 0)
if (indx[1] == 0)
stop("A formula argument is required")
## prepare data
sdata <- data.frame(data)
mf <- model.frame(formula, sdata) # [dataframe: for latency part]
mf <- na.action(mf) # dealting with nans
N <- nrow(mf)
Y <- model.response(mf)
if (!inherits(Y, "Surv")) stop("Response must be a survival object")
vars.name <- all.vars(formula)[-c(1,2)] # covariates
X <-  as.matrix(sdata[,vars.name])
yobs <- Y[,1]   # observed survival time
delta <- Y[,2] # censoring indicator
vars.num <- ncol(X) # num of covariates
## fit the model
arfit <- AR.fit(yobs,delta,X)
rownames( arfit$coef ) <- vars.name
## tidy the results
fit <- list()
class(fit) <- c("AR")
fit$sdata <- arfit$sdata
fit$call <- call
fit$formula <- formula
fit$vars.num <- vars.num
fit$coef <- arfit$coef
## print the fitting results
if (!is.null(cl <- fit$call)) {
cat("Call:\n")
dput(cl)
}
cat("\nAdditive Risk Model:\n")
print(fit$coef)
cat("\n")
invisible(fit)
}
AR(Surv(yobs,delta)~X1+X2,data=toydata1)
rmarkdown
library(rmarkdown)
library(pandoc)
install.packages("pandoc")
devtools::use_vignette("vignette")
devtools::build_vignettes("vignette")
devtools::use_vignette("vignette")
devtools::use_vignette("vignette")
library(survaux)
AR
?AR
?AR.AuxSP.AGMM
?AR.AuxSP.AGMM
?AR
data("toydata1")
AR(Surv(yobs,delta)~X1+X2,data=toydata1)
data("toydata1")
a <- AR(Surv(yobs,delta)~X1+X2,data=toydata1)
knitr::opts_chunk$set(echo = TRUE)
data("toydata1")
gXcut <- function(X){  # group function
rbind(  ( X[,1] >= 0.5 & X[,2] == 0),
( X[,1] <  0.5 & X[,2] == 0),
( X[,1] >= 0.5 & X[,2] == 1),
( X[,1] <  0.5 & X[,2] == 1)
) * 1
}
phi.true <- c(0.646,0.732,0.433,0.491)
tau <- c(0.2,0,0,0)
phi <- phi.true - tau
aux <- list(tstar=0.5,phi=phi,
G=gXcut(toydata1[,c("X1","X2")]))
AGMMfit <- AR.AuxSP.AGMM(Surv(yobs,delta)~X1+X2,data=toydata1,aux=aux)
library(survival)
library(Matrix)
library(survaux)
data("toydata1")
AR(Surv(yobs,delta)~X1+X2,data=toydata1)
gXcut <- function(X){  # group function
rbind(  ( X[,1] >= 0.5 & X[,2] == 0),
( X[,1] <  0.5 & X[,2] == 0),
( X[,1] >= 0.5 & X[,2] == 1),
( X[,1] <  0.5 & X[,2] == 1)
) * 1
}
data("toydata1")
aux <- list(tstar=0.5,phi=c(0.646,0.732,0.433,0.491),
G=gXcut(toydata1[,c("X1","X2")]))
AR.AuxSP.GMM(Surv(yobs,delta)~X1+X2,data=toydata1,aux=aux)
mean(toydata1$delta)
?toydata1
?toydata1
git init
